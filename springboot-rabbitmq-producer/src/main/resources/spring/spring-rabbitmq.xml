<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- 该配置在单元测试中实验进行 -->
    <!-- 定义过期队列及属性，若队列不存在，则自动创建 -->
    <rabbit:queue id="my_ttl_queue" name="my_ttl_queue" auto-declare="true">
        <rabbit:queue-arguments>
            <!-- 该队列的消息在6秒之后没有消费者消费时，则本条消息自动删除 -->
            <entry key="x-message-ttl" value-type="long" value="6000"></entry>
            <!--
                参数 x-message-ttl 的值必须为非负的32位整数（0<n<2^32-1)，以毫秒为单位表示TTL的值。
                如果不设置ttl，则表示消息不会过期。如果将ttl设置为0，则表示，除非此时将消息消费，否则消息将被立即丢弃
            -->
        </rabbit:queue-arguments>
    </rabbit:queue>


    <!-- 死信队列 -->
    <!-- 定义定向交换机的持久化的死信队列，不存在则自动创建 -->
    <rabbit:queue id="my_dlx_queue" name="my_dlx_queue" auto-declare="true"></rabbit:queue>

    <!-- 定义广播类型交换机，并绑定上述队列 -->
    <rabbit:direct-exchange name="my_dlx_exchange" id="my_dlx_exchange" auto-declare="true">
        <rabbit:bindings>
            <!-- 绑定路由键 my_ttl_dlx、my_max_dlx，可以将过期的消息转移到 my_dlx_queue队列 -->
            <rabbit:binding key="my_ttl_dlx" queue="my_dlx_queue"></rabbit:binding>
            <rabbit:binding key="my_max_dlx" queue="my_dlx_queue"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 定义过期队列及其属性，若不存在则自动创建 -->
    <rabbit:queue id="my_ttl_dlx_queue" name="my_ttl_dlx_queue" auto-declare="true">
        <rabbit:queue-arguments>
            <!-- 投递到该队列的消息如果没有消费，则在6秒之后被投递到死信队列 -->
            <entry key="x-message-ttl" value="6000" value-type="long"></entry>
            <!-- 设定当消息过期后，消息被投递到的死信交换机 -->
            <entry key="x-dead-letter-exchange" value="my_dlx_exchange"></entry>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!-- 定义限制长度的队列及其属性，不存在则自动创建 -->
    <rabbit:queue id="my_max_dlx_queue" name="my_max_dlx_queue" auto-declare="true">
        <rabbit:queue-arguments>
            <!-- 投递小该队列的消息的最大数量为2，如果超过，则最早的消息被删除投递到死信队列 -->
            <entry key="x-max-length" value-type="long" value="2"></entry>
            <!-- 设定当消息过期后被投递到的死信交换机 -->
            <entry key="x-dead-letter-exchange" value="my_dlx_exchange"></entry>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!-- 定义定向交换机，根据不同的路由key投递消息 -->
    <rabbit:direct-exchange name="my_normal_exchange" id="my_normal_exchange" auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding key="my_ttl_dlx" queue="my_ttl_dlx_queue"></rabbit:binding>
            <rabbit:binding key="my_max_dlx" queue="my_max_dlx_queue"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>


    <!-- 消息确认机制 -->
    <!-- 消息确认   使用 publisher-confirms="true" 启用消息确认  -->
    <!--                publisher-returns="true" 启用回调-->
    <rabbit:connection-factory id="connectionFactory" host="${spring.rabbitmq.host}"
                               port="${spring.rabbitmq.port}"
                               username="${spring.rabbitmq.username}"
                               password="${spring.rabbitmq.password}"
                               publisher-confirms="true"
                               publisher-returns="true"
    ></rabbit:connection-factory>

    <!-- 消息回调处理类 -->
    <bean id="confirmCallback" class="com.local.springbootrabbitmqproducer.MsgSendConfirmCallback"></bean>
    <!-- 消息失败回调类 -->
    <bean id="sendReturnCallback" class="com.local.springbootrabbitmqproducer.MsgSendReturnCallback"></bean>

    <!-- return-callback="sendReturnCallback" 表示：消息失败回调，同时需配置 mandatory="true" ，否则消息会丢失 -->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
                     confirm-callback="confirmCallback" return-callback="sendReturnCallback"
                     mandatory="true"></rabbit:template>

    <!-- 定义 rabbitmqTemplate 对象操作可以在代码中方便 发送消息 -->
    <!--  confirm-callback="confirmCallback" 表示消息失败回调-->
   <!-- <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
    confirm-callback="confirmCallback"></rabbit:template>-->

</beans>